#include <iostream>
#include <iomanip>
#include "sqlite3.h"
#include <string>
#include <windows.h>

using namespace std;

struct Student {
    int studentCode;
    string name;
    int day[7];
    int totalHours;
    double averageHours;
};

sqlite3* db;
sqlite3_stmt* stmt;

const char* DB_NAME = "student_academic_tracker.db";

int executeSQL(const string& sql) {
    char* errMsg = nullptr;
    int rc = sqlite3_exec(db, sql.c_str(), nullptr, nullptr, &errMsg);
    if (rc != SQLITE_OK) {
        cerr << "SQL Error: " << errMsg << endl;
        sqlite3_free(errMsg);
    }
    return rc;
}

void initializeDatabase() {
    int rc = sqlite3_open(DB_NAME, &db);
    if (rc) {
        cerr << "Can't open database: " << sqlite3_errmsg(db) << endl;
        exit(0);
    }

    string createTableSQL = R"(
        CREATE TABLE IF NOT EXISTS students (
            studentCode INTEGER PRIMARY KEY,
            name TEXT,
            day1 INTEGER,
            day2 INTEGER,
            day3 INTEGER,
            day4 INTEGER,
            day5 INTEGER,
            day6 INTEGER,
            day7 INTEGER,
            totalHours INTEGER,
            averageHours REAL
        );
    )";

    executeSQL(createTableSQL);
}
void addStudent() {
    system("cls");
    Student s;
    s.totalHours = 0;

    cout << "Enter student name: ";
    cin >> s.name;
    cout << "Enter student code: ";
    cin >> s.studentCode;

    for (int i = 0; i < 7; ++i) {
        int hours;
        do {
            cout << "Enter study hours for day " << i + 1 << " (<=24): ";
            cin >> hours;
        } while (hours < 0 || hours > 24);
        s.day[i] = hours;
        s.totalHours += hours;
    }

    s.averageHours = static_cast<double>(s.totalHours) / 7.0;

    string insertSQL = "INSERT INTO students (studentCode, name, day1, day2, day3, day4, day5, day6, day7, totalHours, averageHours) VALUES (" +
        to_string(s.studentCode) + ", '" + s.name + "', " +
        to_string(s.day[0]) + ", " + to_string(s.day[1]) + ", " +
        to_string(s.day[2]) + ", " + to_string(s.day[3]) + ", " +
        to_string(s.day[4]) + ", " + to_string(s.day[5]) + ", " +
        to_string(s.day[6]) + ", " + to_string(s.totalHours) + ", " +
        to_string(s.averageHours) + ");";

    executeSQL(insertSQL);
    cout << "Student added successfully!" << endl;
}

void seeResults() {
    system("cls");
    string query = "SELECT name, studentCode, totalHours, averageHours, day1, day2, day3, day4, day5, day6, day7 FROM students;";
    int rc = sqlite3_prepare_v2(db, query.c_str(), -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        cerr << "Failed to fetch data." << endl;
        return;
    }

    cout << "---------------------------------------------------------------------------------------------" << endl;
    cout << "| Name        | Code | Total | Avg  | Day 1 | Day 2 | Day 3 | Day 4 | Day 5 | Day 6 | Day 7 |" << endl;
    cout << "---------------------------------------------------------------------------------------------" << endl;

    while (sqlite3_step(stmt) == SQLITE_ROW) {
        const char* name = (const char*)sqlite3_column_text(stmt, 0);
        int code = sqlite3_column_int(stmt, 1);
        int total = sqlite3_column_int(stmt, 2);
        double avg = sqlite3_column_double(stmt, 3);

        cout << "| " << setw(11) << left << name << " | "
             << setw(4) << code << " | "
             << setw(5) << total << " | "
             << setw(4) << fixed << setprecision(2) << avg << " | ";

        for (int i = 0; i < 7; ++i)
            cout << setw(5) << sqlite3_column_int(stmt, 4 + i) << " | ";

        cout << endl;
    }

    cout << "---------------------------------------------------------------------------------------------" << endl;
    sqlite3_finalize(stmt);
    system("Pause");
}

void generateConclusion() {
    system("cls");
    string query = "SELECT name, totalHours FROM students;";
    int rc = sqlite3_prepare_v2(db, query.c_str(), -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        cerr << "Failed to fetch total study hours." << endl;
        return;
    }

    string topStudentName;
    int topStudentHours = 0;

    cout << "\nConclusion: Who studies the most?" << endl;
    while (sqlite3_step(stmt) == SQLITE_ROW) {
        const char* name = (const char*)sqlite3_column_text(stmt, 0);
        int totalHours = sqlite3_column_int(stmt, 1);

        cout << name << " has studied " << totalHours << " hours in total." << endl;

        if (totalHours > topStudentHours) {
            topStudentHours = totalHours;
            topStudentName = name;
        }
    }

    if (!topStudentName.empty()) {
        cout << "\nThe student who studies the most is " << topStudentName << " with " << topStudentHours << " total study hours." << endl;
    } else {
        cout << "No data available to determine the top student." << endl;
    }

    sqlite3_finalize(stmt);
}
void searchStudent() {
    system("cls");
    cout << "1. Search by name\n2. Search by code\nEnter choice: ";
    int choice;
    cin >> choice;

    string query;
    if (choice == 1) {
        string name;
        cout << "Enter student name: ";
        cin >> name;
        query = "SELECT * FROM students WHERE name = '" + name + "';";
    } else {
        int code;
        cout << "Enter student code: ";
        cin >> code;
        query = "SELECT * FROM students WHERE studentCode = " + to_string(code) + ";";
    }

    int rc = sqlite3_prepare_v2(db, query.c_str(), -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        cerr << "Failed to fetch student." << endl;
        return;
    }

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        const char* name = (const char*)sqlite3_column_text(stmt, 1);
        int code = sqlite3_column_int(stmt, 0);
        int total = sqlite3_column_int(stmt, 8);
        double avg = sqlite3_column_double(stmt, 9);

        cout << "\nStudent: " << name << " (Code: " << code << ")\n";
        cout << "Total Hours: " << total << ", Average: " << fixed << setprecision(2) << avg << endl;
        cout << "Daily Hours: ";
        for (int i = 0; i < 7; ++i)
            cout << sqlite3_column_int(stmt, 2 + i) << (i < 6 ? ", " : "");
        cout << endl;
    } else {
        cout << "Student not found." << endl;
    }

    sqlite3_finalize(stmt);
}
void deleteStudent() {
    system("cls");
    int code;
    cout << "Enter student ID/code to delete: ";
    cin >> code;

    string deleteSQL = "DELETE FROM students WHERE studentCode = " + to_string(code) + ";";
    executeSQL(deleteSQL);

    cout << "Student deleted successfully." << endl;
}

void editStudentHours() {
    system("cls");
    int code;
    cout << "Enter student code to edit: ";
    cin >> code;

    string checkSQL = "SELECT * FROM students WHERE studentCode = " + to_string(code) + ";";
    int rc = sqlite3_prepare_v2(db, checkSQL.c_str(), -1, &stmt, 0);
    if (rc != SQLITE_OK || sqlite3_step(stmt) != SQLITE_ROW) {
        cout << "Student not found." << endl;
        sqlite3_finalize(stmt);
        return;
    }

    sqlite3_finalize(stmt);

    Student s;
    s.studentCode = code;
    s.totalHours = 0;

    for (int i = 0; i < 7; ++i) {
        cout << "Enter new hours for day " << i + 1 << ": ";
        cin >> s.day[i];
        s.totalHours += s.day[i];
    }

    s.averageHours = s.totalHours / 7.0;
   string updateSQL = "UPDATE students SET "
        "day1 = " + to_string(s.day[0]) + ", "
        "day2 = " + to_string(s.day[1]) + ", "
        "day3 = " + to_string(s.day[2]) + ", "
        "day4 = " + to_string(s.day[3]) + ", "
        "day5 = " + to_string(s.day[4]) + ", "
        "day6 = " + to_string(s.day[5]) + ", "
        "day7 = " + to_string(s.day[6]) + ", "
        "totalHours = " + to_string(s.totalHours) + ", "
        "averageHours = " + to_string(s.averageHours) +
        " WHERE studentCode = " + to_string(s.studentCode) + ";";

    executeSQL(updateSQL);
    cout << "Study hours updated successfully." << endl;
}
int main() {
    initializeDatabase();
    cout << "\n\t\t\t\t---Welcome to Student Study Hours Tracker ---\n";
    Sleep(2000);

    while (true) {
        cout << "\t1. Add Student\n";
        cout << "\t2. See Results\n";
        cout << "\t3. Search Student\n";
        cout << "\t4. Delete Student\n";
        cout << "\t5. Show Conclusion\n";
        cout << "\t6. Edit Student Hours\n";
        cout << "\t7. Exit\n";
        cout << "Enter your choice: ";
        int choice;
        cin >> choice;
return 0;
}
